#!/usr/bin/python
import sys, getopt, threading, random
from SocketServer import BaseRequestHandler,ThreadingUDPServer
from subprocess import check_output
from math import *
from dns_packet import Dns_Packet

# UDP Handler to handle dig requests
class Udp_Handler(BaseRequestHandler) :
    
    min_dist = 41000 # circumference of earth
    client_locations = {} # store closest replica for prev clients
    replica_locations = { 
        "54.210.1.206":"39.0481,-77.4728",
        "54.67.25.76":"37.3388,-121.8914",
        "35.161.203.105":"45.8696,-119.6880",
        "52.213.13.179":"53.3389,-6.2595",
        "52.196.161.198":"35.6427,139.7677",
        "54.255.148.115":"1.2855,103.8565",
        "13.54.30.86":"-33.8612,151.1982",
        "52.67.177.90":"-23.5464,-46.6289",
        "35.156.54.135":"50.1167,8.6833"
    } # replica server and their coordinates
    
    # handle dig requests
    # extract dig packet, attach answer, pack and send to client
    def handle(self) :
        global domain_name
        req=self.request[0].strip()
        sock = self.request[1]
        packet = Dns_Packet()
        packet.extract(req)
        if ((packet.query_type==0x0001 or packet.query_type==0x001c) and packet.query_class==0x0001 and packet.query_name == domain_name):
            replica_ip = self.closest_server()
            send_packet = packet.build(replica_ip)
            sock.sendto(send_packet,self.client_address)
            
    # calculate geographic distance between 2 servers  using haver sine
    def haver_sine(self,client_loc,replica_loc, replica):
        lat1 = radians(float(client_loc.split(',')[0]))
        lon1 = radians(float(client_loc.split(',')[1]))
        lat2 = radians(float(replica_loc.split(',')[0]))
        lon2 = radians(float(replica_loc.split(',')[1]))
        
        dlon = lon2 - lon1
        dlat = lat2 - lat1
        a= sin(dlat/2)**2 + cos(lat1) * cos(lat2) * sin(dlon/2)**2
        c = 2 * asin(sqrt(a))
        d = c*6373
        
        # update the dict with server at least distance
        update_lock = threading.Lock()
        with update_lock:
            if self.client_address[0] in self.client_locations:
                if d<self.min_dist:
                    self.min_dist = d
                    self.client_locations[self.client_address[0]] = replica
            else :
                self.client_locations[self.client_address[0]] = replica
            
    # get location of client
    def get_location(self):
        param = "ipinfo.io/"+self.client_address[0]+"/loc"
        return check_output(["curl", param]).strip('\n')
    
    # find geographically closest replica server for the client
    def find_closest(self):
        thread_list = []
        client_loc = self.get_location()
        
        for each in self.replica_locations:
            t = threading.Thread(target=self.haver_sine, args=(client_loc,self.replica_locations[each],each, ))
            thread_list.append(t)
        
        for each in thread_list:
            each.start()
        
        for each in thread_list:
            each.join()
        
        return self.client_locations[self.client_address[0]]
        
    # return closest server to client
    def closest_server(self):
        try:
            if self.client_address[0] in self.client_locations :
                return self.client_locations[self.client_address[0]]
            if self.client_address[0] in self.replica_locations :
                return self.client_address[0]
            else :
                return self.find_closest()
        except Exception as msg:
            # print msg
            return random.choice(self.replica_locations.keys())
            		
            
if __name__ == "__main__":
    global domain_name
    domain_name = sys.argv[4]
    # dns server to handle dig requests
    dns_server = ThreadingUDPServer(('',int(sys.argv[2])),Udp_Handler)
    try:
        dns_server.serve_forever()
    except KeyboardInterrupt:
        # shutdown server upon interruption
        dns_server.shutdown()
	
